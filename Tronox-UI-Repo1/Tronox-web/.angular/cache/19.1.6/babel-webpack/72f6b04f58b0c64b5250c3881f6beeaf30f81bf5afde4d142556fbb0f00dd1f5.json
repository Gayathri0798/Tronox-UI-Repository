{"ast":null,"code":"import { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, Injectable, ElementRef, EventEmitter, Directive, Output, Renderer2, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { auditTime } from 'rxjs/operators';\n\n/** Component used to load the structural styles of the text field. */\nclass _CdkTextFieldStyleLoader {\n  static ɵfac = function _CdkTextFieldStyleLoader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _CdkTextFieldStyleLoader)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _CdkTextFieldStyleLoader,\n    selectors: [[\"ng-component\"]],\n    hostAttrs: [\"cdk-text-field-style-loader\", \"\"],\n    decls: 0,\n    vars: 0,\n    template: function _CdkTextFieldStyleLoader_Template(rf, ctx) {},\n    styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_CdkTextFieldStyleLoader, [{\n    type: Component,\n    args: [{\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'cdk-text-field-style-loader': ''\n      },\n      styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"]\n    }]\n  }], null, null);\n})();\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n  _platform = inject(Platform);\n  _ngZone = inject(NgZone);\n  _styleLoader = inject(_CdkPrivateStyleLoader);\n  _monitoredElements = new Map();\n  constructor() {}\n  monitor(elementOrRef) {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n    this._styleLoader.load(_CdkTextFieldStyleLoader);\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject;\n    }\n    const result = new Subject();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = event => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({\n          target: event.target,\n          isAutofilled: true\n        }));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({\n          target: event.target,\n          isAutofilled: false\n        }));\n      }\n    };\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n    return result;\n  }\n  stopMonitoring(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  static ɵfac = function AutofillMonitor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AutofillMonitor)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AutofillMonitor,\n    factory: AutofillMonitor.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n  _elementRef = inject(ElementRef);\n  _autofillMonitor = inject(AutofillMonitor);\n  /** Emits when the autofill state of the element changes. */\n  cdkAutofill = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(event => this.cdkAutofill.emit(event));\n  }\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n  static ɵfac = function CdkAutofill_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkAutofill)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkAutofill,\n    selectors: [[\"\", \"cdkAutofill\", \"\"]],\n    outputs: {\n      cdkAutofill: \"cdkAutofill\"\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], () => [], {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n  _elementRef = inject(ElementRef);\n  _platform = inject(Platform);\n  _ngZone = inject(NgZone);\n  _renderer = inject(Renderer2);\n  _resizeEvents = new Subject();\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  _previousValue;\n  _initialHeight;\n  _destroyed = new Subject();\n  _listenerCleanups;\n  _minRows;\n  _maxRows;\n  _enabled = true;\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  _previousMinRows = -1;\n  _textareaElement;\n  /** Minimum amount of rows in the textarea. */\n  get minRows() {\n    return this._minRows;\n  }\n  set minRows(value) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n  /** Maximum amount of rows in the textarea. */\n  get maxRows() {\n    return this._maxRows;\n  }\n  set maxRows(value) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n  /** Whether autosizing is enabled or not */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n  get placeholder() {\n    return this._textareaElement.placeholder;\n  }\n  set placeholder(value) {\n    this._cachedPlaceholderHeight = undefined;\n    if (value) {\n      this._textareaElement.setAttribute('placeholder', value);\n    } else {\n      this._textareaElement.removeAttribute('placeholder');\n    }\n    this._cacheTextareaPlaceholderHeight();\n  }\n  /** Cached height of a textarea with a single row. */\n  _cachedLineHeight;\n  /** Cached height of a textarea with only the placeholder. */\n  _cachedPlaceholderHeight;\n  /** Used to reference correct document/window */\n  _document = inject(DOCUMENT, {\n    optional: true\n  });\n  _hasFocus;\n  _isViewInited = false;\n  constructor() {\n    const styleLoader = inject(_CdkPrivateStyleLoader);\n    styleLoader.load(_CdkTextFieldStyleLoader);\n    this._textareaElement = this._elementRef.nativeElement;\n  }\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight() {\n    const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight() {\n    const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n      this._ngZone.runOutsideAngular(() => {\n        this._listenerCleanups = [this._renderer.listen('window', 'resize', () => this._resizeEvents.next()), this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent), this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent)];\n        this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n          // Clear the cached heights since the styles can change\n          // when the window is resized (e.g. by media queries).\n          this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n          this.resizeToFitContent(true);\n        });\n      });\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n  ngOnDestroy() {\n    this._listenerCleanups?.forEach(cleanup => cleanup());\n    this._resizeEvents.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  _cacheTextareaLineHeight() {\n    if (this._cachedLineHeight) {\n      return;\n    }\n    // Use a clone element because we have to override some styles.\n    const textareaClone = this._textareaElement.cloneNode(false);\n    const cloneStyles = textareaClone.style;\n    textareaClone.rows = 1;\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    cloneStyles.position = 'absolute';\n    cloneStyles.visibility = 'hidden';\n    cloneStyles.border = 'none';\n    cloneStyles.padding = '0';\n    cloneStyles.height = '';\n    cloneStyles.minHeight = '';\n    cloneStyles.maxHeight = '';\n    // App styles might be messing with the height through the positioning properties.\n    cloneStyles.top = cloneStyles.bottom = cloneStyles.left = cloneStyles.right = 'auto';\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    cloneStyles.overflow = 'hidden';\n    this._textareaElement.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textareaClone.remove();\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n  _measureScrollHeight() {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n    // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    }\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    element.classList.add(measuringClass);\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n    return scrollHeight;\n  }\n  _cacheTextareaPlaceholderHeight() {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n    const value = this._textareaElement.value;\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n  /** Handles `focus` and `blur` events. */\n  _handleFocusEvent = event => {\n    this._hasFocus = event.type === 'focus';\n  };\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n    this._cacheTextareaLineHeight();\n    this._cacheTextareaPlaceholderHeight();\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n    const textarea = this._elementRef.nativeElement;\n    const value = textarea.value;\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n    const scrollHeight = this._measureScrollHeight();\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  _scrollToCaretPosition(textarea) {\n    const {\n      selectionStart,\n      selectionEnd\n    } = textarea;\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n  static ɵfac = function CdkTextareaAutosize_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkTextareaAutosize)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTextareaAutosize,\n    selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n    hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n          return ctx._noopInputHandler();\n        });\n      }\n    },\n    inputs: {\n      minRows: [0, \"cdkAutosizeMinRows\", \"minRows\"],\n      maxRows: [0, \"cdkAutosizeMaxRows\", \"maxRows\"],\n      enabled: [2, \"cdkTextareaAutosize\", \"enabled\", booleanAttribute],\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"cdkTextareaAutosize\"],\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], () => [], {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: [{\n        alias: 'cdkTextareaAutosize',\n        transform: booleanAttribute\n      }]\n    }],\n    placeholder: [{\n      type: Input\n    }]\n  });\n})();\nclass TextFieldModule {\n  static ɵfac = function TextFieldModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TextFieldModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TextFieldModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkAutofill, CdkTextareaAutosize],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"names":["normalizePassiveListenerOptions","Platform","i0","Component","ChangeDetectionStrategy","ViewEncapsulation","inject","NgZone","Injectable","ElementRef","EventEmitter","Directive","Output","Renderer2","booleanAttribute","Input","NgModule","_CdkPrivateStyleLoader","coerceElement","coerceNumberProperty","EMPTY","Subject","DOCUMENT","auditTime","_CdkTextFieldStyleLoader","ɵfac","_CdkTextFieldStyleLoader_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","template","_CdkTextFieldStyleLoader_Template","rf","ctx","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","OnPush","None","host","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_styleLoader","_monitoredElements","Map","constructor","monitor","elementOrRef","isBrowser","load","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","AutofillMonitor_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵdir","ɵɵdefineDirective","outputs","selector","CdkTextareaAutosize","_renderer","_resizeEvents","_previousValue","_initialHeight","_destroyed","_listenerCleanups","_minRows","_maxRows","_enabled","_previousMinRows","_textareaElement","minRows","value","_setMinHeight","maxRows","_setMaxHeight","enabled","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","_cachedLineHeight","_document","optional","_hasFocus","_isViewInited","styleLoader","nativeElement","minHeight","style","maxHeight","ngAfterViewInit","height","listen","_handleFocusEvent","pipe","cleanup","_cacheTextareaLineHeight","textareaClone","cloneNode","cloneStyles","rows","position","visibility","border","padding","top","bottom","left","right","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostBindings","CdkTextareaAutosize_HostBindings","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","features","ɵɵInputTransformsFeature","alias","transform","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["C:/tronox/Tronox-UI-Repo1/Tronox-web/node_modules/@angular/cdk/fesm2022/text-field.mjs"],"sourcesContent":["import { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, Injectable, ElementRef, EventEmitter, Directive, Output, Renderer2, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { auditTime } from 'rxjs/operators';\n\n/** Component used to load the structural styles of the text field. */\nclass _CdkTextFieldStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _CdkTextFieldStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: _CdkTextFieldStyleLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-text-field-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _CdkTextFieldStyleLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'cdk-text-field-style-loader': '' }, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"] }]\n        }] });\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _monitoredElements = new Map();\n    constructor() { }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        this._styleLoader.load(_CdkTextFieldStyleLoader);\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: AutofillMonitor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    _elementRef = inject(ElementRef);\n    _autofillMonitor = inject(AutofillMonitor);\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill = new EventEmitter();\n    constructor() { }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkAutofill, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: () => [], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _resizeEvents = new Subject();\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n    _previousValue;\n    _initialHeight;\n    _destroyed = new Subject();\n    _listenerCleanups;\n    _minRows;\n    _maxRows;\n    _enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    _previousMinRows = -1;\n    _textareaElement;\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Cached height of a textarea with a single row. */\n    _cachedLineHeight;\n    /** Cached height of a textarea with only the placeholder. */\n    _cachedPlaceholderHeight;\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT, { optional: true });\n    _hasFocus;\n    _isViewInited = false;\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_CdkTextFieldStyleLoader);\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                this._listenerCleanups = [\n                    this._renderer.listen('window', 'resize', () => this._resizeEvents.next()),\n                    this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent),\n                    this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent),\n                ];\n                this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n                    // Clear the cached heights since the styles can change\n                    // when the window is resized (e.g. by media queries).\n                    this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n                    this.resizeToFitContent(true);\n                });\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._listenerCleanups?.forEach(cleanup => cleanup());\n        this._resizeEvents.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        const textareaClone = this._textareaElement.cloneNode(false);\n        const cloneStyles = textareaClone.style;\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        cloneStyles.position = 'absolute';\n        cloneStyles.visibility = 'hidden';\n        cloneStyles.border = 'none';\n        cloneStyles.padding = '0';\n        cloneStyles.height = '';\n        cloneStyles.minHeight = '';\n        cloneStyles.maxHeight = '';\n        // App styles might be messing with the height through the positioning properties.\n        cloneStyles.top = cloneStyles.bottom = cloneStyles.left = cloneStyles.right = 'auto';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        cloneStyles.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    /** Handles `focus` and `blur` events. */\n    _handleFocusEvent = (event) => {\n        this._hasFocus = event.type === 'focus';\n    };\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkTextareaAutosize, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: TextFieldModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}