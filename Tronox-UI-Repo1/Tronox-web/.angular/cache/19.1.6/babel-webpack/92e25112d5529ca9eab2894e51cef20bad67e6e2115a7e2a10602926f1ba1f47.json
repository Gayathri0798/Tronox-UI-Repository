{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { AuthService } from '@tronox-web/util-library';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  authService;\n  router;\n  username = '';\n  password = '';\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.authService.logout();\n  }\n  onLogin() {\n    this.authService.login(this.username, this.password).subscribe({\n      next: response => {\n        console.log(response.message);\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('tronox_username', this.username);\n        this.router.navigate(['/tile']);\n      },\n      error: err => {\n        console.error('Login failed', err);\n      }\n    });\n  }\n  onInput(field, event) {\n    if (field == 'username') {\n      this.username = event.target.value;\n    } else {\n      this.password = event.target.value;\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'lib-login',\n  imports: [CommonModule, MatCardModule, MatFormFieldModule, MatInputModule, MatButtonModule, FormsModule],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n}), __metadata(\"design:paramtypes\", [AuthService, Router])], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","CommonModule","MatCardModule","MatFormFieldModule","MatInputModule","MatButtonModule","AuthService","Router","FormsModule","LoginComponent","authService","router","username","password","constructor","ngOnInit","logout","onLogin","login","subscribe","next","response","console","log","message","localStorage","setItem","token","navigate","error","err","onInput","field","event","target","value","__decorate","selector","imports","templateUrl","styleUrl"],"sources":["C:\\tronox\\Tronox-UI-Repo1\\Tronox-web\\libs\\shared\\ui-library\\src\\lib\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AuthService } from '@tronox-web/util-library';\r\nimport { Router } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-login',\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  username = '';\r\n  password = '';\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n  ngOnInit(): void {\r\n    this.authService.logout();\r\n  }\r\n\r\n  onLogin() {\r\n    this.authService.login(this.username, this.password).subscribe({\r\n      next: (response) => {\r\n        console.log(response.message);\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('tronox_username', this.username);\r\n        this.router.navigate(['/tile']);\r\n      },\r\n      error: (err) => {\r\n        console.error('Login failed', err);\r\n      },\r\n    });\r\n  }\r\n\r\n  onInput(field: string, event: any) {\r\n    if (field == 'username') {\r\n      this.username = event.target.value;\r\n    } else {\r\n      this.password = event.target.value;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,WAAW,QAAQ,gBAAgB;AAerC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAILC,WAAA;EAAkCC,MAAA;EAHtDC,QAAQ,GAAG,EAAE;EACbC,QAAQ,GAAG,EAAE;EAEbC,YAAoBJ,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EACvEI,QAAQA,CAAA;IACN,IAAI,CAACL,WAAW,CAACM,MAAM,EAAE;EAC3B;EAEAC,OAAOA,CAAA;IACL,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACM,SAAS,CAAC;MAC7DC,IAAI,EAAGC,QAAQ,IAAI;QACjBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,OAAO,CAAC;QAC7BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACM,KAAK,CAAC;QAC7CF,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAACd,QAAQ,CAAC;QACtD,IAAI,CAACD,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACbR,OAAO,CAACO,KAAK,CAAC,cAAc,EAAEC,GAAG,CAAC;MACpC;KACD,CAAC;EACJ;EAEAC,OAAOA,CAACC,KAAa,EAAEC,KAAU;IAC/B,IAAID,KAAK,IAAI,UAAU,EAAE;MACvB,IAAI,CAACpB,QAAQ,GAAGqB,KAAK,CAACC,MAAM,CAACC,KAAK;IACpC,CAAC,MAAM;MACL,IAAI,CAACtB,QAAQ,GAAGoB,KAAK,CAACC,MAAM,CAACC,KAAK;IACpC;EACF;CACD;AA9BY1B,cAAc,GAAA2B,UAAA,EAb1BpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,WAAW;EACrBC,OAAO,EAAE,CACPrC,YAAY,EACZC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,EACdC,eAAe,EACfG,WAAW,CACZ;EACD+B,WAAW,EAAE,wBAAwB;EACrCC,QAAQ,EAAE;CACX,CAAC,E,iCAKiClC,WAAW,EAAkBC,MAAM,G,EAJzDE,cAAc,CA8B1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}