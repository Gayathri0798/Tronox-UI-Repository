{"ast":null,"code":"import { __decorate, __metadata, __param } from \"tslib\";\nimport { Component, ElementRef, inject, Inject, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatDialogModule, MatDialogTitle, MatDialogContent, MatDialogClose } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { TileService } from '@tronox-web/util-library';\nimport { TestResultDialogComponent } from '../test-result-dialog/test-result-dialog.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nlet TileDialogBoxComponent = class TileDialogBoxComponent {\n  dialogRef;\n  data;\n  tileService;\n  hasResults = true;\n  constructor(dialogRef, data, tileService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.tileService = tileService;\n  }\n  fileName = null;\n  fileUrl = null;\n  fileUploaded = false;\n  isProcessing = false;\n  file;\n  result;\n  dialog = inject(MatDialog);\n  previousResultLength;\n  wordFileBlob = null; // Variable to store the file\n  testResults = [];\n  resultsContainer;\n  resultsTable;\n  onFileSelected(event) {\n    this.file = event.target.files[0];\n    if (this.file) {\n      this.fileName = this.file.name;\n      // Create a temporary URL for downloading\n      const objectUrl = URL.createObjectURL(this.file);\n      this.fileUrl = objectUrl;\n      this.fileUploaded = true;\n      this.wordFileBlob = null;\n    }\n  }\n  runScript() {\n    if (!this.file) return;\n    this.isProcessing = true;\n    this.wordFileBlob = null;\n    this.result = ''; // Clear previous results\n    this.tileService.uploadAndFetchRealTimeRes(this.file, this.data?.tile?.appNamespec).subscribe({\n      next: chunk => {\n        this.result += chunk;\n      },\n      error: error => {\n        console.error('Error uploading file:', error);\n        this.isProcessing = false;\n        this.fetchTestResults();\n      },\n      complete: () => {\n        console.log('✅ File processing complete');\n        this.isProcessing = false;\n        this.fetchTestResults();\n        // Fetch the Word document result and store it\n        // this.tileService.getWordDocResult().subscribe({\n        //   next: (blob: Blob) => {\n        //     console.log('📄 Word file received');\n        //     this.wordFileBlob = blob;\n        //   },\n        //   error: (err) => {\n        //     console.error('❌ Error fetching Word file:', err);\n        //     alert('Failed to fetch Word file.');\n        //   },\n        // });\n      }\n    });\n  }\n  fetchTestResults() {\n    this.tileService.getTestCaseResults().subscribe({\n      next: results => {\n        this.testResults = results;\n        this.hasResults = this.testResults.length > 0;\n        //console.log('Lav', this.testResults);\n      },\n      error: err => {\n        console.error('Error fetching test results:', err);\n      }\n    });\n  }\n  openResultsDialog(result) {\n    this.dialog.open(TestResultDialogComponent, {\n      disableClose: true,\n      height: '800px',\n      width: '1200px',\n      data: result\n    });\n  }\n  downloadTemplate() {\n    if (!this.wordFileBlob) {\n      alert('No file available for download. Please run the script first.');\n      return;\n    }\n    const a = document.createElement('a');\n    const objectUrl = URL.createObjectURL(this.wordFileBlob);\n    a.href = objectUrl;\n    a.download = `Screenshots_${Date.now()}.docx`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(objectUrl);\n    console.log('📥 Word file downloaded');\n  }\n  closeDialog() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    URL.revokeObjectURL(this.fileUrl);\n    this.dialogRef.close();\n  }\n  scrollToBottom() {\n    if (this.resultsContainer) {\n      this.resultsContainer.nativeElement.scrollTop = this.resultsContainer.nativeElement.scrollHeight;\n    }\n  }\n  ngAfterViewChecked() {\n    this.adjustDialogHeight();\n    if (this.resultsContainer && this.result.length > this.previousResultLength) {\n      this.scrollToBottom();\n    }\n    this.previousResultLength = this.result.length;\n  }\n  adjustDialogHeight() {\n    if (this.resultsTable?.nativeElement) {\n      const tableHeight = this.resultsTable.nativeElement.offsetHeight;\n      const baseHeight = 400; // Minimum dialog height\n      const maxHeight = 700; // Prevent excessive height growth\n      const newHeight = Math.min(baseHeight + tableHeight, maxHeight);\n      this.dialogRef.updateSize('600px', `${newHeight}px`);\n    }\n  }\n};\n__decorate([ViewChild('resultsContainer'), __metadata(\"design:type\", Object)], TileDialogBoxComponent.prototype, \"resultsContainer\", void 0);\n__decorate([ViewChild('resultsTable'), __metadata(\"design:type\", ElementRef)], TileDialogBoxComponent.prototype, \"resultsTable\", void 0);\nTileDialogBoxComponent = __decorate([Component({\n  selector: 'lib-tile-dialog-box',\n  imports: [CommonModule, MatDialogTitle, MatDialogContent, MatDialogClose, MatButtonModule, MatDialogModule, MatProgressSpinnerModule, MatFormFieldModule, MatIconModule, MatTableModule],\n  templateUrl: './tile-dialog-box.component.html',\n  styleUrl: './tile-dialog-box.component.scss'\n}), __param(1, Inject(MAT_DIALOG_DATA)), __metadata(\"design:paramtypes\", [MatDialogRef, Object, TileService])], TileDialogBoxComponent);\nexport { TileDialogBoxComponent };","map":{"version":3,"names":["Component","ElementRef","inject","Inject","ViewChild","CommonModule","MatButtonModule","MAT_DIALOG_DATA","MatDialog","MatDialogRef","MatDialogModule","MatDialogTitle","MatDialogContent","MatDialogClose","MatProgressSpinnerModule","TileService","TestResultDialogComponent","MatFormFieldModule","MatIconModule","MatTableModule","TileDialogBoxComponent","dialogRef","data","tileService","hasResults","constructor","fileName","fileUrl","fileUploaded","isProcessing","file","result","dialog","previousResultLength","wordFileBlob","testResults","resultsContainer","resultsTable","onFileSelected","event","target","files","name","objectUrl","URL","createObjectURL","runScript","uploadAndFetchRealTimeRes","tile","appNamespec","subscribe","next","chunk","error","console","fetchTestResults","complete","log","getTestCaseResults","results","length","err","openResultsDialog","open","disableClose","height","width","downloadTemplate","alert","a","document","createElement","href","download","Date","now","body","appendChild","click","removeChild","revokeObjectURL","closeDialog","close","scrollToBottom","nativeElement","scrollTop","scrollHeight","ngAfterViewChecked","adjustDialogHeight","tableHeight","offsetHeight","baseHeight","maxHeight","newHeight","Math","min","updateSize","__decorate","selector","imports","templateUrl","styleUrl","__param","Object"],"sources":["C:\\tronox\\Tronox-UI-Repo1\\Tronox-web\\libs\\shared\\ui-library\\src\\lib\\tile-dialog-box\\tile-dialog-box.component.ts"],"sourcesContent":["import {\r\n  AfterViewChecked,\r\n  Component,\r\n  ElementRef,\r\n  inject,\r\n  Inject,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialog,\r\n  MatDialogRef,\r\n} from '@angular/material/dialog';\r\nimport {\r\n  MatDialogModule,\r\n  MatDialogTitle,\r\n  MatDialogContent,\r\n  MatDialogClose,\r\n} from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { TileService } from '@tronox-web/util-library';\r\nimport { TestResultDialogComponent } from '../test-result-dialog/test-result-dialog.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\n@Component({\r\n  selector: 'lib-tile-dialog-box',\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogTitle,\r\n    MatDialogContent,\r\n    MatDialogClose,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n  ],\r\n  templateUrl: './tile-dialog-box.component.html',\r\n  styleUrl: './tile-dialog-box.component.scss',\r\n})\r\nexport class TileDialogBoxComponent implements AfterViewChecked {\r\n  hasResults = true;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<TileDialogBoxComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private readonly tileService: TileService\r\n  ) {}\r\n\r\n  fileName: string | null = null;\r\n  fileUrl: string | null = null;\r\n  fileUploaded = false;\r\n  isProcessing = false;\r\n  file: File | undefined;\r\n  result: any;\r\n  private dialog = inject(MatDialog);\r\n  previousResultLength: any;\r\n  wordFileBlob: Blob | null = null; // Variable to store the file\r\n  testResults: any[] = [];\r\n  @ViewChild('resultsContainer') resultsContainer: ElementRef | undefined;\r\n  @ViewChild('resultsTable') resultsTable!: ElementRef;\r\n  onFileSelected(event: any): void {\r\n    this.file = event.target.files[0];\r\n\r\n    if (this.file) {\r\n      this.fileName = this.file.name;\r\n\r\n      // Create a temporary URL for downloading\r\n      const objectUrl = URL.createObjectURL(this.file);\r\n      this.fileUrl = objectUrl;\r\n      this.fileUploaded = true;\r\n      this.wordFileBlob = null;\r\n    }\r\n  }\r\n\r\n  runScript(): void {\r\n    if (!this.file) return;\r\n\r\n    this.isProcessing = true;\r\n    this.wordFileBlob = null;\r\n    this.result = ''; // Clear previous results\r\n\r\n    this.tileService\r\n      .uploadAndFetchRealTimeRes(this.file, this.data?.tile?.appNamespec)\r\n      .subscribe({\r\n        next: (chunk) => {\r\n          this.result += chunk;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error uploading file:', error);\r\n          this.isProcessing = false;\r\n          this.fetchTestResults();\r\n        },\r\n        complete: () => {\r\n          console.log('✅ File processing complete');\r\n          this.isProcessing = false;\r\n          this.fetchTestResults();\r\n          // Fetch the Word document result and store it\r\n          // this.tileService.getWordDocResult().subscribe({\r\n          //   next: (blob: Blob) => {\r\n          //     console.log('📄 Word file received');\r\n          //     this.wordFileBlob = blob;\r\n          //   },\r\n          //   error: (err) => {\r\n          //     console.error('❌ Error fetching Word file:', err);\r\n          //     alert('Failed to fetch Word file.');\r\n          //   },\r\n          // });\r\n        },\r\n      });\r\n  }\r\n\r\n  fetchTestResults() {\r\n    this.tileService.getTestCaseResults().subscribe({\r\n      next: (results) => {\r\n        this.testResults = results;\r\n        this.hasResults = this.testResults.length > 0;\r\n        //console.log('Lav', this.testResults);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error fetching test results:', err);\r\n      },\r\n    });\r\n  }\r\n\r\n  openResultsDialog(result: any) {\r\n    this.dialog.open(TestResultDialogComponent, {\r\n      disableClose: true,\r\n      height: '800px',\r\n      width: '1200px',\r\n      data: result,\r\n    });\r\n  }\r\n\r\n  downloadTemplate(): void {\r\n    if (!this.wordFileBlob) {\r\n      alert('No file available for download. Please run the script first.');\r\n      return;\r\n    }\r\n\r\n    const a = document.createElement('a');\r\n    const objectUrl = URL.createObjectURL(this.wordFileBlob);\r\n    a.href = objectUrl;\r\n    a.download = `Screenshots_${Date.now()}.docx`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(objectUrl);\r\n\r\n    console.log('📥 Word file downloaded');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    URL.revokeObjectURL(this.fileUrl!);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  scrollToBottom() {\r\n    if (this.resultsContainer) {\r\n      this.resultsContainer.nativeElement.scrollTop =\r\n        this.resultsContainer.nativeElement.scrollHeight;\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.adjustDialogHeight();\r\n    if (\r\n      this.resultsContainer &&\r\n      this.result.length > this.previousResultLength\r\n    ) {\r\n      this.scrollToBottom();\r\n    }\r\n    this.previousResultLength = this.result.length;\r\n  }\r\n\r\n  adjustDialogHeight() {\r\n    if (this.resultsTable?.nativeElement) {\r\n      const tableHeight = this.resultsTable.nativeElement.offsetHeight;\r\n      const baseHeight = 400; // Minimum dialog height\r\n      const maxHeight = 700; // Prevent excessive height growth\r\n\r\n      const newHeight = Math.min(baseHeight + tableHeight, maxHeight);\r\n      this.dialogRef.updateSize('600px', `${newHeight}px`);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}