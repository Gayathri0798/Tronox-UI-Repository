{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\";\nclass TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker;\n  /** Index at which the search for the next gap will start. */\n  columnIndex = 0;\n  /** The current row index. */\n  rowIndex = 0;\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /** The computed (row, col) position of each tile (the output). */\n  positions;\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /** Calculates the row and col position of a tile. */\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /** Finds the next available space large enough to fit the tile. */\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n  /** Move \"down\" to the next row. */\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++;\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n  /** Update the tile tracker to account for the given tile in the given space. */\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n  row;\n  col;\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n}\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\nclass MatGridTile {\n  _element = inject(ElementRef);\n  _gridList = inject(MAT_GRID_LIST, {\n    optional: true\n  });\n  _rowspan = 1;\n  _colspan = 1;\n  constructor() {}\n  /** Amount of rows that the grid tile takes up. */\n  get rowspan() {\n    return this._rowspan;\n  }\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n  get colspan() {\n    return this._colspan;\n  }\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n  static ɵfac = function MatGridTile_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTile)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridTile,\n    selectors: [[\"mat-grid-tile\"]],\n    hostAttrs: [1, \"mat-grid-tile\"],\n    hostVars: 2,\n    hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n      }\n    },\n    inputs: {\n      rowspan: \"rowspan\",\n      colspan: \"colspan\"\n    },\n    exportAs: [\"matGridTile\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-grid-tile-content\"]],\n    template: function MatGridTile_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [], {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridTileText {\n  _element = inject(ElementRef);\n  _lines;\n  constructor() {}\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  static ɵfac = function MatGridTileText_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileText)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridTileText,\n    selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n    contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n      }\n    },\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"mat-grid-list-text\"]],\n    template: function MatGridTileText_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1);\n        i0.ɵɵprojection(0);\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵprojection(2, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(3, 2);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], () => [], {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n  static ɵfac = function MatGridAvatarCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridAvatarCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridAvatarCssMatStyler,\n    selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-grid-avatar\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n  static ɵfac = function MatGridTileHeaderCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileHeaderCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridTileHeaderCssMatStyler,\n    selectors: [[\"mat-grid-tile-header\"]],\n    hostAttrs: [1, \"mat-grid-tile-header\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n  static ɵfac = function MatGridTileFooterCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileFooterCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridTileFooterCssMatStyler,\n    selectors: [[\"mat-grid-tile-footer\"]],\n    hostAttrs: [1, \"mat-grid-tile-footer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n  _gutterSize;\n  _rows = 0;\n  _rowspan = 0;\n  _cols;\n  _direction;\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  fixedRowHeight;\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['height', null]);\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio;\n  baseTileHeight;\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  _element = inject(ElementRef);\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  /** Number of columns being rendered. */\n  _cols;\n  /** Used for determining the position of each tile in the grid. */\n  _tileCoordinator;\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  _rowHeight;\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  _gutter = '1px';\n  /** Sets position and size styles for a tile */\n  _tileStyler;\n  /** Query list of tiles that are being rendered. */\n  _tiles;\n  constructor() {}\n  /** Amount of columns in the grid list. */\n  get cols() {\n    return this._cols;\n  }\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n  get gutterSize() {\n    return this._gutter;\n  }\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n  static ɵfac = function MatGridList_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridList)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridList,\n    selectors: [[\"mat-grid-list\"]],\n    contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tiles = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-grid-list\"],\n    hostVars: 1,\n    hostBindings: function MatGridList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"cols\", ctx.cols);\n      }\n    },\n    inputs: {\n      cols: \"cols\",\n      gutterSize: \"gutterSize\",\n      rowHeight: \"rowHeight\"\n    },\n    exportAs: [\"matGridList\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_GRID_LIST,\n      useExisting: MatGridList\n    }])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function MatGridList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [_c3],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [], {\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }],\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridListModule {\n  static ɵfac = function MatGridListModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridListModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatGridListModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule, MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };","map":{"version":3,"names":["i0","InjectionToken","inject","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","_c0","_c1","_c2","_c3","TileCoordinator","tracker","columnIndex","rowIndex","rowCount","rowspan","lastRowMax","Math","max","positions","update","numColumns","tiles","Array","fill","length","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","constructor","MAT_GRID_LIST","MatGridTile","_element","_gridList","optional","_rowspan","_colspan","value","round","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","ɵɵattribute","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ɵsetClassMetadata","args","selector","host","None","OnPush","MatGridTileText","_lines","ngAfterContentInit","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","cssCalcAllowedValue","TileStyler","_gutterSize","_rows","_cols","_direction","init","gutterSize","cols","direction","normalizeUnits","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","rowHeightRatio","baseTileHeight","_parseRatio","percentHeightPerTile","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_tileCoordinator","_rowHeight","_gutter","_tileStyler","rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","filter","index","pos","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","ɵTileCoordinator"],"sources":["C:/tronox/Tronox-UI-Repo1/Tronox-web/node_modules/@angular/material/fesm2022/grid-list.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    /** Tracking array (see class description). */\n    tracker;\n    /** Index at which the search for the next gap will start. */\n    columnIndex = 0;\n    /** The current row index. */\n    rowIndex = 0;\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() {\n        return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /** The computed (row, col) position of each tile (the output). */\n    positions;\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    row;\n    col;\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\nclass MatGridTile {\n    _element = inject(ElementRef);\n    _gridList = inject(MAT_GRID_LIST, { optional: true });\n    _rowspan = 1;\n    _colspan = 1;\n    constructor() { }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTile, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridTile, isStandalone: true, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: () => [], propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    _element = inject(ElementRef);\n    _lines;\n    constructor() { }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileText, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridTileText, isStandalone: true, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridAvatarCssMatStyler, isStandalone: true, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridTileHeaderCssMatStyler, isStandalone: true, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridTileFooterCssMatStyler, isStandalone: true, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    _gutterSize;\n    _rows = 0;\n    _rowspan = 0;\n    _cols;\n    _direction;\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    fixedRowHeight;\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /** Ratio width:height given by user to determine row height. */\n    rowHeightRatio;\n    baseTileHeight;\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    _element = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    /** Number of columns being rendered. */\n    _cols;\n    /** Used for determining the position of each tile in the grid. */\n    _tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    _gutter = '1px';\n    /** Sets position and size styles for a tile */\n    _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles;\n    constructor() { }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridList, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatGridList, isStandalone: true, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n            {\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList,\n            },\n        ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\nclass MatGridListModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule,\n            MatCommonModule,\n            MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler], exports: [MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatLineModule,\n            MatCommonModule,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule,\n            MatCommonModule, MatLineModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}