{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { ToolbarComponent } from '../toolbar/toolbar.component';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TileLayoutComponent } from '../tile-layout/tile-layout.component';\nimport { TileService } from '@tronox-web/util-library';\nimport { MatIconModule } from '@angular/material/icon';\nlet DrawerLayoutComponent = class DrawerLayoutComponent {\n  breakpointObserver;\n  tileService;\n  isDrawerOpen = true;\n  tiles = [];\n  cols = 3;\n  isSubMenuOpen = {};\n  uniqueTiles = [];\n  selectedSubMenuApp;\n  tilesCopy;\n  constructor(breakpointObserver, tileService) {\n    this.breakpointObserver = breakpointObserver;\n    this.tileService = tileService;\n    this.breakpointObserver.observe([Breakpoints.XSmall, Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(result => {\n      if (result.breakpoints[Breakpoints.XSmall]) {\n        this.cols = 1;\n      } else if (result.breakpoints[Breakpoints.Small]) {\n        this.cols = 2;\n      } else if (result.breakpoints[Breakpoints.Medium]) {\n        this.cols = 3;\n      } else if (result.breakpoints[Breakpoints.Large]) {\n        this.cols = 4;\n      } else if (result.breakpoints[Breakpoints.XLarge]) {\n        this.cols = 5;\n      }\n    });\n  }\n  ngOnInit() {\n    this.tileService.getTiles().subscribe(tiles => {\n      Object.entries(tiles).forEach(([key, value]) => {\n        this.tiles.push(value);\n      });\n      this.getUniqueTiles(this.tiles);\n      this.tilesCopy = JSON.parse(JSON.stringify(this.tiles));\n    });\n  }\n  toggleSubMenu() {\n    // Toggle the visibility of the submenu\n    this.isSubMenuOpen = !this.isSubMenuOpen;\n  }\n  getUniqueTiles(tiles) {\n    tiles.forEach(tile => {\n      let found = this.uniqueTiles.find(ut => ut?.appName == tile?.appName);\n      if (!found) {\n        this.uniqueTiles.push(tile);\n      }\n      found = null;\n    });\n  }\n  updateTileView(appName) {\n    this.selectedSubMenuApp = appName;\n  }\n};\n__decorate([Input(), __metadata(\"design:type\", Object)], DrawerLayoutComponent.prototype, \"isDrawerOpen\", void 0);\nDrawerLayoutComponent = __decorate([Component({\n  selector: 'lib-drawer-layout',\n  standalone: true,\n  imports: [CommonModule, MatSidenavModule, ToolbarComponent, TileLayoutComponent, MatIconModule],\n  templateUrl: './drawer-layout.component.html',\n  styleUrl: './drawer-layout.component.scss'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof BreakpointObserver !== \"undefined\" && BreakpointObserver) === \"function\" ? _a : Object, TileService])], DrawerLayoutComponent);\nexport { DrawerLayoutComponent };","map":{"version":3,"names":["Component","Input","CommonModule","MatSidenavModule","ToolbarComponent","BreakpointObserver","Breakpoints","TileLayoutComponent","TileService","MatIconModule","DrawerLayoutComponent","breakpointObserver","tileService","isDrawerOpen","tiles","cols","isSubMenuOpen","uniqueTiles","selectedSubMenuApp","tilesCopy","constructor","observe","XSmall","Small","Medium","Large","XLarge","subscribe","result","breakpoints","ngOnInit","getTiles","Object","entries","forEach","key","value","push","getUniqueTiles","JSON","parse","stringify","toggleSubMenu","tile","found","find","ut","appName","updateTileView","__decorate","selector","standalone","imports","templateUrl","styleUrl","_a"],"sources":["C:\\tronox\\Tronox-UI-Repo1\\Tronox-web\\libs\\shared\\ui-library\\src\\lib\\drawer-layout\\drawer-layout.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { ToolbarComponent } from '../toolbar/toolbar.component';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { TileLayoutComponent } from '../tile-layout/tile-layout.component';\r\nimport { TileService } from '@tronox-web/util-library';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n@Component({\r\n  selector: 'lib-drawer-layout',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatSidenavModule,\r\n    ToolbarComponent,\r\n    TileLayoutComponent,\r\n    MatIconModule,\r\n  ],\r\n  templateUrl: './drawer-layout.component.html',\r\n  styleUrl: './drawer-layout.component.scss',\r\n})\r\nexport class DrawerLayoutComponent implements OnInit {\r\n  @Input() isDrawerOpen = true;\r\n  tiles: any = [];\r\n  cols: any = 3;\r\n  isSubMenuOpen: any = {};\r\n  uniqueTiles: any = [];\r\n  selectedSubMenuApp: any;\r\n  tilesCopy: any;\r\n  constructor(\r\n    private readonly breakpointObserver: BreakpointObserver,\r\n    private readonly tileService: TileService\r\n  ) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.breakpoints[Breakpoints.XSmall]) {\r\n          this.cols = 1;\r\n        } else if (result.breakpoints[Breakpoints.Small]) {\r\n          this.cols = 2;\r\n        } else if (result.breakpoints[Breakpoints.Medium]) {\r\n          this.cols = 3;\r\n        } else if (result.breakpoints[Breakpoints.Large]) {\r\n          this.cols = 4;\r\n        } else if (result.breakpoints[Breakpoints.XLarge]) {\r\n          this.cols = 5;\r\n        }\r\n      });\r\n  }\r\n  ngOnInit(): void {\r\n    this.tileService.getTiles().subscribe((tiles: any) => {\r\n      Object.entries(tiles).forEach(([key, value]) => {\r\n        this.tiles.push(value);\r\n      });\r\n      this.getUniqueTiles(this.tiles);\r\n      this.tilesCopy = JSON.parse(JSON.stringify(this.tiles));\r\n    });\r\n  }\r\n\r\n  toggleSubMenu(): void {\r\n    // Toggle the visibility of the submenu\r\n    this.isSubMenuOpen = !this.isSubMenuOpen;\r\n  }\r\n\r\n  getUniqueTiles(tiles: any) {\r\n    tiles.forEach((tile: any) => {\r\n      let found: any = this.uniqueTiles.find(\r\n        (ut: any) => ut?.appName == tile?.appName\r\n      );\r\n      if (!found) {\r\n        this.uniqueTiles.push(tile);\r\n      }\r\n      found = null;\r\n    });\r\n  }\r\n\r\n  updateTileView(appName: string) {\r\n    this.selectedSubMenuApp = appName;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}