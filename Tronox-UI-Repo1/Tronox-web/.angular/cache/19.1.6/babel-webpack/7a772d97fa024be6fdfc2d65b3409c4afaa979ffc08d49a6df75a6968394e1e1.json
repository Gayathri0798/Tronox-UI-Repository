{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { GET_TILES, GET_WORD_DOC, REALTIME_RESULT_URL, TEST_RESULTS, UPLOAD_EXCEL } from '../consts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TileService {\n  http;\n  constructor(http) {\n    this.http = http;\n  }\n  getTiles() {\n    const headers = this.setHeaders();\n    return this.http.get(GET_TILES, {\n      headers\n    });\n  }\n  uploadExcelToServer(file) {\n    const headers = this.setHeaders();\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(UPLOAD_EXCEL, formData, {\n      headers,\n      responseType: 'text'\n    }).pipe(map(response => {\n      try {\n        return JSON.parse(response); // Try parsing JSON if possible\n      } catch (error) {\n        return response; // Return as text if it's not valid JSON\n      }\n    }));\n  }\n  setHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n  uploadAndFetchRealTimeRes(file, testName) {\n    const headers = this.setHeaders();\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('testName', testName);\n    return new Observable(observer => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', REALTIME_RESULT_URL, true);\n      headers.keys().forEach(key => {\n        const value = headers.get(key);\n        if (value) {\n          xhr.setRequestHeader(key, value);\n        }\n      });\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 3) {\n          observer.next(xhr.responseText);\n        } else if (xhr.readyState === 4) {\n          observer.complete();\n        }\n      };\n      xhr.send(formData);\n    });\n  }\n  getWordDocResult() {\n    const headers = this.setHeaders();\n    return this.http.get(GET_WORD_DOC, {\n      headers,\n      responseType: 'blob'\n    });\n  }\n  getTestCaseResults() {\n    const headers = this.setHeaders();\n    return this.http.post(TEST_RESULTS, {}, {\n      headers\n    });\n  }\n  static ɵfac = function TileService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TileService,\n    factory: TileService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","map","Observable","GET_TILES","GET_WORD_DOC","REALTIME_RESULT_URL","TEST_RESULTS","UPLOAD_EXCEL","TileService","http","constructor","getTiles","headers","setHeaders","get","uploadExcelToServer","file","formData","FormData","append","post","responseType","pipe","response","JSON","parse","error","token","localStorage","getItem","set","uploadAndFetchRealTimeRes","testName","observer","xhr","XMLHttpRequest","open","keys","forEach","key","value","setRequestHeader","onreadystatechange","readyState","next","responseText","complete","send","getWordDocResult","getTestCaseResults","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["C:\\tronox\\Tronox-UI-Repo1\\Tronox-web\\libs\\shared\\util-library\\src\\lib\\services\\tile.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport {\r\n  GET_TILES,\r\n  GET_WORD_DOC,\r\n  REALTIME_RESULT_URL,\r\n  TEST_RESULTS,\r\n  UPLOAD_EXCEL,\r\n} from '../consts';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TileService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTiles(): Observable<any> {\r\n    const headers = this.setHeaders();\r\n    return this.http.get<any>(GET_TILES, { headers });\r\n  }\r\n\r\n  uploadExcelToServer(file: File): Observable<any> {\r\n    const headers = this.setHeaders();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    return this.http\r\n      .post(UPLOAD_EXCEL, formData, { headers, responseType: 'text' })\r\n      .pipe(\r\n        map((response: any) => {\r\n          try {\r\n            return JSON.parse(response); // Try parsing JSON if possible\r\n          } catch (error) {\r\n            return response; // Return as text if it's not valid JSON\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  setHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  uploadAndFetchRealTimeRes(file: File, testName: string): Observable<string> {\r\n    const headers = this.setHeaders();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('testName', testName);\r\n    return new Observable<string>((observer) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('POST', REALTIME_RESULT_URL, true);\r\n\r\n      headers.keys().forEach((key) => {\r\n        const value = headers.get(key);\r\n        if (value) {\r\n          xhr.setRequestHeader(key, value);\r\n        }\r\n      });\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 3) {\r\n          observer.next(xhr.responseText);\r\n        } else if (xhr.readyState === 4) {\r\n          observer.complete();\r\n        }\r\n      };\r\n\r\n      xhr.send(formData);\r\n    });\r\n  }\r\n\r\n  getWordDocResult() {\r\n    const headers = this.setHeaders();\r\n    return this.http.get(GET_WORD_DOC, { headers, responseType: 'blob' });\r\n  }\r\n\r\n  getTestCaseResults(): Observable<any[]> {\r\n    const headers = this.setHeaders();\r\n    return this.http.post<any[]>(TEST_RESULTS, {}, { headers });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}